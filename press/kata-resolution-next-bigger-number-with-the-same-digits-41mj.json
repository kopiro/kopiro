{
  "type_of": "article",
  "id": 413667,
  "title": "Kata resolution: Next bigger number with the same digits",
  "description": "I would like to share with you my solution of a Kata on CodeWars.  This is the link to the kata...",
  "readable_publish_date": "Jul 30 '20",
  "slug": "kata-resolution-next-bigger-number-with-the-same-digits-41mj",
  "path": "/kopiro/kata-resolution-next-bigger-number-with-the-same-digits-41mj",
  "url": "https://dev.to/kopiro/kata-resolution-next-bigger-number-with-the-same-digits-41mj",
  "comments_count": 3,
  "public_reactions_count": 15,
  "collection_id": null,
  "published_timestamp": "2020-07-30T10:09:00Z",
  "language": "en",
  "subforem_id": null,
  "positive_reactions_count": 15,
  "cover_image": null,
  "social_image": "https://media2.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fg8tc4yoy1tbeifyxuakx.png",
  "canonical_url": "https://dev.to/kopiro/kata-resolution-next-bigger-number-with-the-same-digits-41mj",
  "created_at": "2020-07-30T10:08:42Z",
  "edited_at": "2022-07-28T18:48:54Z",
  "crossposted_at": null,
  "published_at": "2020-07-30T10:09:00Z",
  "last_comment_at": "2024-03-10T10:47:24Z",
  "reading_time_minutes": 3,
  "tag_list": "codewars, javascript",
  "tags": [
    "codewars",
    "javascript"
  ],
  "body_html": "<p>I would like to share with you my solution of a Kata on CodeWars.</p>\n\n<p>This is the link to the kata problem: <a href=\"http://www.codewars.com/kata/next-bigger-number-with-the-same-digits/javascript\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.codewars.com/kata/next-bigger-number-with-the-same-digits</a></p>\n\n<p>I solved it using Javascript, but the algorithm I created is (of course) extendable to all other programming languages.</p>\n\n<h3>\n  <a name=\"the-problem\" href=\"#the-problem\">\n  </a>\n  The problem\n</h3>\n\n<p><em>You have to create a function that takes a positive integer number and returns the next bigger number formed by the same digits.</em></p>\n\n<p>So, just to be clear, let me give you some examples:</p>\n\n<ol>\n<li><p>next bigger of <strong>12</strong> is <strong>21</strong></p></li>\n<li><p>next bigger of <strong>513</strong> is <strong>531</strong></p></li>\n<li><p>next bigger of <strong>2017</strong> is <strong>2071</strong></p></li>\n<li><p>next bigger of <strong>59884848459853</strong> is <strong>59884848483559</strong></p></li>\n</ol>\n\n<p>If no bigger number can be composed using those digits, you have to return <strong>-1</strong>.</p>\n\n<h3>\n  <a name=\"how-i-approached\" href=\"#how-i-approached\">\n  </a>\n  How I approached\n</h3>\n\n<p>Initially, I <strong>totally misunderstood</strong> the problem, thinking that I should find <strong>the</strong> biggest number of the same digits… so I simply wrote:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nf\">nextBigger</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"o\">+</span><span class=\"nc\">String</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">).</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">).</span><span class=\"nf\">sort</span><span class=\"p\">().</span><span class=\"nf\">reverse</span><span class=\"p\">().</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>It would be all too easy.</p>\n\n<p>Therefore, I took paper &amp; pencil and I just started writing random numbers.</p>\n\n<p>I watched for 2–3 minutes, and I realized that:</p>\n\n<ol>\n<li><p>there is a <strong>left part</strong> that must be the same (because we want the <strong>next</strong> bigger number).</p></li>\n<li><p>there is a <strong>right part</strong> that has to change, sorting it.</p></li>\n<li><p>there is a <strong>pivot</strong> that is between the two parts and it just increments the number to reach the next.</p></li>\n</ol>\n\n<p>So, the algorithm consists of three parts.</p>\n\n<h3>\n  <a name=\"find-the-pivot-and-split-the-parts\" href=\"#find-the-pivot-and-split-the-parts\">\n  </a>\n  Find the pivot and split the parts\n</h3>\n\n<p>To find the pivot, we read the number from right to left, until we find a digit that is bigger than the previous one.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>For number 21581957621\n2158195 &lt;-- here --&gt; 7621\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In this case <code>5</code> is the pivot, because <code>7 &gt; 5</code>.</p>\n\n<p>The left part is <code>215819</code>, the right part is <code>7621</code>.</p>\n\n<h3>\n  <a name=\"find-the-substitute-for-the-pivot\" href=\"#find-the-substitute-for-the-pivot\">\n  </a>\n  Find the substitute for the pivot\n</h3>\n\n<p>What is our substitute for the pivot?</p>\n\n<p>It’s pretty simple, remember that we want the next bigger number, so we have to find the <strong>smallest</strong> digit (in the right part) that is <strong>larger</strong> than the pivot.</p>\n\n<p>In this case, <code>6</code> is our substitute.</p>\n\n<h3>\n  <a name=\"reorder-the-right-part\" href=\"#reorder-the-right-part\">\n  </a>\n  Reorder the right part\n</h3>\n\n<p>Now, to obtain the smallest number, we just reorder the right part, only after inserting our excluded pivot (<code>5</code>) and remove the substitute (<code>6</code>).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>7621+5-6 = 7215 → reorder → 1257\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"join-the-parts\" href=\"#join-the-parts\">\n  </a>\n  Join the parts\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>215819 + 6 + 1257 = 21581961257\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And that’s all!</p>\n\n<h2>\n  <a name=\"the-javascript-code\" href=\"#the-javascript-code\">\n  </a>\n  The Javascript code\n</h2>\n\n<p>The best part is obviously the algorithm, but, here the code I wrote:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nf\">nextBigger</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">().</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// find the pivot, the point (from right) where i &gt; i-1</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">d</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"nx\">d</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"o\">+</span><span class=\"nx\">d</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n      <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// if we are unable to find the pivot, skip</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">p</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// splice the digits in the pivot</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">right</span> <span class=\"o\">=</span> <span class=\"nx\">d</span><span class=\"p\">.</span><span class=\"nf\">splice</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// extract pivot</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">pv</span> <span class=\"o\">=</span> <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nf\">splice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// find the lowest number &gt; pv</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">mm</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">mmi</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">right</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"nx\">pv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">mm</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"nx\">right</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"nx\">mm</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">mm</span> <span class=\"o\">=</span> <span class=\"nx\">right</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        <span class=\"nx\">mmi</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">mmi</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nf\">splice</span><span class=\"p\">(</span><span class=\"nx\">mmi</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"nx\">pv</span><span class=\"p\">);</span>\n  <span class=\"nx\">right</span> <span class=\"o\">=</span> <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// concat the left + new pivot + right part</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">ret</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"nx\">d</span><span class=\"p\">.</span><span class=\"nf\">concat</span><span class=\"p\">([</span><span class=\"nx\">mm</span><span class=\"p\">]).</span><span class=\"nf\">concat</span><span class=\"p\">(</span><span class=\"nx\">right</span><span class=\"p\">).</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">ret</span> <span class=\"o\">&lt;</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n",
  "body_markdown": "I would like to share with you my solution of a Kata on CodeWars.\n\nThis is the link to the kata problem: [http://www.codewars.com/kata/next-bigger-number-with-the-same-digits](http://www.codewars.com/kata/next-bigger-number-with-the-same-digits/javascript)\n\nI solved it using Javascript, but the algorithm I created is (of course) extendable to all other programming languages.\n\n### The problem\n\n*You have to create a function that takes a positive integer number and returns the next bigger number formed by the same digits.*\n\nSo, just to be clear, let me give you some examples:\n\n1. next bigger of **12** is **21**\n\n1. next bigger of **513** is **531**\n\n1. next bigger of **2017** is **2071**\n\n1. next bigger of **59884848459853** is **59884848483559**\n\nIf no bigger number can be composed using those digits, you have to return **-1**.\n\n### How I approached\n\nInitially, I **totally misunderstood** the problem, thinking that I should find **the** biggest number of the same digits… so I simply wrote:\n\n```js\nfunction nextBigger(n) {\n   return +String(n).split('').sort().reverse().join('');\n}\n```\n\nIt would be all too easy.\n\nTherefore, I took paper & pencil and I just started writing random numbers.\n\nI watched for 2–3 minutes, and I realized that:\n\n1. there is a **left part** that must be the same (because we want the **next** bigger number).\n\n1. there is a **right part** that has to change, sorting it.\n\n1. there is a **pivot** that is between the two parts and it just increments the number to reach the next.\n\nSo, the algorithm consists of three parts.\n\n### Find the pivot and split the parts\n\nTo find the pivot, we read the number from right to left, until we find a digit that is bigger than the previous one.\n\n```\nFor number 21581957621\n2158195 <-- here --> 7621\n```\n\nIn this case `5` is the pivot, because `7 > 5`.\n\nThe left part is `215819`, the right part is `7621`.\n\n### Find the substitute for the pivot\n\nWhat is our substitute for the pivot?\n\nIt’s pretty simple, remember that we want the next bigger number, so we have to find the **smallest** digit (in the right part) that is **larger** than the pivot.\n\nIn this case, `6` is our substitute.\n\n### Reorder the right part\n\nNow, to obtain the smallest number, we just reorder the right part, only after inserting our excluded pivot (`5`) and remove the substitute (`6`).\n\n```\n7621+5-6 = 7215 → reorder → 1257\n```\n\n### Join the parts\n\n```\n215819 + 6 + 1257 = 21581961257\n```\n\nAnd that’s all!\n\n## The Javascript code\n\nThe best part is obviously the algorithm, but, here the code I wrote:\n\n```js\nfunction nextBigger(n){\n  var d = n.toString().split('');\n  \n  // find the pivot, the point (from right) where i > i-1\n  var p = -1;\n  for (var i = d.length-1; i > 0; i--) {\n    if (+d[i] > +d[i-1]) {\n      p = i-1;\n      break;\n    }\n  }\n  \n  // if we are unable to find the pivot, skip\n  if (p == -1) return p;\n    \n  // splice the digits in the pivot\n  var right = d.splice(p);\n  \n  // extract pivot\n  var pv = right.splice(0, 1)[0];\n  \n  // find the lowest number > pv\n  var mm = null, mmi = null;\n  for (var i = 0; i < right.length; i++) {\n    if (right[i] > pv) {\n      if (mm == null || right[i] < mm) {\n        mm = right[i];\n        mmi = i;\n      }\n    }\n  }\n\n  if (mmi == null) return -1;\n  \n  right.splice(mmi, 1);\n  right.push(pv);\n  right = right.sort();\n  \n  // concat the left + new pivot + right part\n  var ret = +d.concat([mm]).concat(right).join('');\n  if (ret < n) return -1;\n  \n  return ret;\n}\n```",
  "user": {
    "name": "Flavio De Stefano",
    "username": "kopiro",
    "twitter_username": "destefanoflavio",
    "github_username": "kopiro",
    "user_id": 386888,
    "website_url": "https://www.kopiro.me",
    "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F386888%2Ff683c0ad-bdf7-4401-9141-46416239d66d.jpg",
    "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F386888%2Ff683c0ad-bdf7-4401-9141-46416239d66d.jpg"
  }
}