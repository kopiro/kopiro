{
  "type_of": "article",
  "id": 416755,
  "title": "How I built the SiriWaveJS library: a look at the math and the code",
  "description": "It was 4 years ago when I had the idea to replicate the Apple¬Æ Siri wave-form (introduced with the iP...",
  "readable_publish_date": "Aug 3 '20",
  "slug": "how-i-built-the-siriwavejs-library-a-look-at-the-math-and-the-code-l0o",
  "path": "/kopiro/how-i-built-the-siriwavejs-library-a-look-at-the-math-and-the-code-l0o",
  "url": "https://dev.to/kopiro/how-i-built-the-siriwavejs-library-a-look-at-the-math-and-the-code-l0o",
  "comments_count": 0,
  "public_reactions_count": 18,
  "collection_id": null,
  "published_timestamp": "2020-08-03T11:30:58Z",
  "language": "en",
  "subforem_id": null,
  "positive_reactions_count": 18,
  "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fi%2Fk1i915are06zdw037tel.png",
  "social_image": "https://media2.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fi%2Fk1i915are06zdw037tel.png",
  "canonical_url": "https://dev.to/kopiro/how-i-built-the-siriwavejs-library-a-look-at-the-math-and-the-code-l0o",
  "created_at": "2020-08-03T11:30:58Z",
  "edited_at": "2020-08-03T12:58:49Z",
  "crossposted_at": null,
  "published_at": "2020-08-03T11:30:58Z",
  "last_comment_at": "2020-08-03T11:30:58Z",
  "reading_time_minutes": 9,
  "tag_list": "siri, ios, web, canvas",
  "tags": [
    "siri",
    "ios",
    "web",
    "canvas"
  ],
  "body_html": "<p>It was 4 years ago when I had the idea to replicate the Apple¬Æ Siri wave-form (introduced with the iPhone 4S) in the browser using pure Javascript.</p>\n\n<p>During the last month, I updated this library by doing a lot of refactoring using ES6 features and reviewed the build process using <strong>RollupJS</strong>. Now I‚Äôve decided to share what I've learned during this process and the math behind this library.</p>\n\n<p>To get an idea of what the output will be, visit the <a href=\"http://kopiro.github.io/siriwave/\">live example</a>; the whole codebase is <a href=\"https://github.com/kopiro/siriwave\">here</a>.</p>\n\n<p>Additionally, you can download all plots drawn in this article in GCX (OSX Grapher format): <a href=\"https://github.com/kopiro/siriwave/raw/master/etc/gcx/default.gcx\">default.gcx</a> and <a href=\"https://github.com/kopiro/siriwave/raw/master/etc/gcx/ios9.gcx\">ios9.gcx</a></p>\n\n<h2>\n  <a name=\"the-classic-wave-style\" href=\"#the-classic-wave-style\">\n  </a>\n  The classic wave style\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--a2yl3VkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2380/1%2A60NI4dQ3KgGxAm7SJSUQww.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--a2yl3VkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2380/1%2A60NI4dQ3KgGxAm7SJSUQww.gif\" alt=\"Classic style\" loading=\"lazy\" width=\"800\" height=\"400\" data-animated=\"true\"></a></p>\n\n<p>Initially, this library only had the classic wave-form style that all of you remember using in iOS 7 and iOS 8.</p>\n\n<p>It‚Äôs no hard task to replicate this simple wave-form, only a bit of math and basic concepts of the Canvas API.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RDCnhW8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/0%2A1FuKVf3OEMhJq8zq.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RDCnhW8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/0%2A1FuKVf3OEMhJq8zq.jpg\" alt=\"Siri wave-form in iOS 7/8\" loading=\"lazy\" width=\"640\" height=\"308\"></a></p>\n\n<p>You‚Äôre probably thinking that the wave-form is a modification of the <strong>Sine</strong> math equation, and you're right... well, almost right.</p>\n\n<p>Before starting to code, we‚Äôve got to find our linear equation that will be simply applied afterward. My favorite plot editor is <strong>Grapher;</strong> you can find it in any OSX installation under <em>Applications &gt; Utilities &gt; Grapher.app</em></p>\n\n<p>We start by drawing the well known <code>sin(x)</code>:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--84PWs_QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AP_POqjjTsJSRbd1yXhU4OQ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--84PWs_QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AP_POqjjTsJSRbd1yXhU4OQ.png\" alt=\"Plot for y = sin(x)\" loading=\"lazy\" width=\"800\" height=\"383\"></a></p>\n\n<p>Perfecto! Now, let‚Äôs add some parameters (Amplitude <code>[A]</code>, Time coordinate <code>[t]</code> and Spatial frequency <code>[k]</code>) that will be useful later (Read more at: <a href=\"https://en.wikipedia.org/wiki/Wave\">https://en.wikipedia.org/wiki/Wave</a>).</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SSIMUin9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://miro.medium.com/max/346/1%2Abub3URu32khRadkhU-WvOw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SSIMUin9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://miro.medium.com/max/346/1%2Abub3URu32khRadkhU-WvOw.png\" alt=\"\" loading=\"lazy\" width=\"192\" height=\"19\"></a></p>\n\n<p>Now we have to ‚Äúattenuate‚Äù this function on plot boundaries, so that for <code>|x| &gt; 2</code>, the <code>y</code> values tends to 0. Let‚Äôs draw separately an equation <code>g(x)</code> that has these characteristics.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sX8BNFS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AODjpbIr835U5NvW3MpetTw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sX8BNFS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AODjpbIr835U5NvW3MpetTw.png\" alt=\"\" loading=\"lazy\" width=\"103\" height=\"44\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--didvQjlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AZsl7m01QLtcwwrj8icJ2dw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--didvQjlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AZsl7m01QLtcwwrj8icJ2dw.png\" alt=\"\" loading=\"lazy\" width=\"538\" height=\"264\"></a></p>\n\n<p>This seems to be a good equation to start with. Let‚Äôs add some parameters here too to smooth the curve for our purposes:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RMtsT38d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AnQ0Eu0V9YxnXNWeT7B66-g.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RMtsT38d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AnQ0Eu0V9YxnXNWeT7B66-g.png\" alt=\"\" loading=\"lazy\" width=\"139\" height=\"44\"></a></p>\n\n<p>Now, by multiplying our <code>f(x, ‚Ä¶)</code> and <code>g(x, ‚Ä¶)</code>, and by setting precise parameters to the other static values, we obtain something like this.</p>\n\n<ul>\n<li><p><code>A = 0.9</code> set the amplitude of the wave to max Y = A</p></li>\n<li><p><code>k = 8</code> set the spatial frequency and we obtain ‚Äúmore peaks‚Äù in the range [-2, 2]</p></li>\n<li><p><code>t = -œÄ/2</code> set the phase translation so that <code>f(0, ‚Ä¶) = 1</code></p></li>\n<li><p><code>K = 4</code> set the factor for the ‚Äúattenuation equation‚Äù so that the final equation is y = 0 when <code>|x| ‚â• 2</code></p></li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Rscnu-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2APpPTyzlE1R1WBHRorp9wNA.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Rscnu-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2APpPTyzlE1R1WBHRorp9wNA.png\" alt=\"\" loading=\"lazy\" width=\"656\" height=\"385\"></a></p>\n\n<p>It looks good! üòç</p>\n\n<p>Now, if you notice on the original wave we have other sub-waves that will give a lower value for the amplitude. Let‚Äôs draw them for <code>A = {0.8, 0.6, 0.4, 0.2, -0.2, -0.4, -0.6, -0.8}</code></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1SPIB8Fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AVf8LFJTkLtk5NWifl4D_8w.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1SPIB8Fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AVf8LFJTkLtk5NWifl4D_8w.png\" alt=\"\" loading=\"lazy\" width=\"781\" height=\"467\"></a></p>\n\n<p>In the final canvas composition, the sub-waves will be drawn with a decreasing opacity tending to <code>0</code>.</p>\n\n<h3>\n  <a name=\"basic-code-concepts\" href=\"#basic-code-concepts\">\n  </a>\n  Basic code concepts\n</h3>\n\n<p>What do we do now with this equation?</p>\n\n<p>We use the equation to obtain the <strong>Y value</strong> for an <strong>input X</strong>.</p>\n\n<p>Basically, by using a simple <strong>for loop</strong> from <code>-2 to 2</code> (the <em>plot boundaries in this case</em>), we have to draw <strong>point by point</strong> the equation on the canvas using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath\">beginPath</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo\">lineTo</a> API.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nf\">getContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">2d</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">beginPath</span><span class=\"p\">();</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">strokeStyle</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mf\">0.01</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nf\">_xpos</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nf\">_ypos</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n   <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">lineTo</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">stroke</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Probably this pseudo-code will clear up these ideas. We still have to implement our <code>_xpos</code> and <code>_ypos</code> functions.</p>\n\n<p>But‚Ä¶ hey, what is <code>0.01</code>???</p>\n\n<p>That value represents <strong>how many pixels</strong> you move forward in each iteration before reaching the right plot boundary... but why 0.0.1, and what is the correct value?</p>\n\n<p>If you use a really small value (<code>&lt; 0.01</code>), you‚Äôll get an insanely precise rendering of the graph but your performance will decrease because you‚Äôll get too many iterations.</p>\n\n<p>Instead, if you use a really big value (<code>&gt; 0.1</code>) your graph will lose precision and you‚Äôll notice this instantly.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tBaPN63d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AF9vtajOYHMBnd47FtuCcBQ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tBaPN63d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AF9vtajOYHMBnd47FtuCcBQ.png\" alt=\"Plot drawn with precision = 0.2\" loading=\"lazy\" width=\"610\" height=\"312\"></a></p>\n\n<p>You can see that the final code is actually similar to the pseudo-code: <a href=\"https://github.com/kopiro/siriwave/blob/master/src/curve.ts\">https://github.com/kopiro/siriwave/blob/master/src/curve.ts</a></p>\n\n<h3>\n  <a name=\"implement-raw-xposi-endraw-\" href=\"#implement-raw-xposi-endraw-\">\n  </a>\n  Implement <code>_xpos(i)</code>\n</h3>\n\n<p>You may argue that if we‚Äôre drawing the plot by incrementing the <code>x</code>, then <code>_xpos</code> may simply return the input argument.</p>\n\n<p>This is almost correct, but our plot is always drawn from <code>-B</code> to <code>B</code> (<code>B = Boundary = 2</code>).</p>\n\n<p>So, to draw on the canvas via <strong>pixel coordinates</strong>, we must translate <code>-B to 0</code> and <code>B to 1</code> (simple transposition of [-B, B] to [0,1]); then multiply [0,1] and the <strong>canvas width (w)</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>_xpos(i) = w * [ (i + B) / 2B ]\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"implement-raw-ypos-endraw-\" href=\"#implement-raw-ypos-endraw-\">\n  </a>\n  Implement <code>_ypos</code>\n</h3>\n\n<p>To implement <code>_ypos</code>, we should simply write our equation obtained before (closely).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">K</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">FREQ</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">_attFn</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"nx\">K</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nx\">K</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">K</span><span class=\"p\">)),</span> <span class=\"nx\">K</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">_ypos</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"nx\">FREQ</span> <span class=\"o\">*</span> <span class=\"nx\">i</span> <span class=\"o\">-</span> <span class=\"nx\">phase</span><span class=\"p\">)</span> <span class=\"o\">*</span> \n        <span class=\"nf\">_attFn</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> \n        <span class=\"nx\">canvasHeight</span> <span class=\"o\">*</span>\n        <span class=\"nx\">globalAmplitude</span> <span class=\"o\">*</span> \n        <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"nx\">attenuation</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Let‚Äôs clarify some parameters.</p>\n\n<ul>\n<li><p><code>canvasHeight</code> is Canvas height expressed in PX</p></li>\n<li><p><code>i</code> is our input value (the X)</p></li>\n<li><p><code>phase</code> is the most important parameter, let‚Äôs discuss it later</p></li>\n<li><p><code>globalAmplitude</code> is a static parameter that represents the amplitude of the total wave (composed by sub-waves)</p></li>\n<li><p><code>attenuation</code> is a static parameter that changes for each line and represents the amplitude of a wave</p></li>\n</ul>\n\n<h3>\n  <a name=\"phase\" href=\"#phase\">\n  </a>\n  Phase\n</h3>\n\n<p>Now let‚Äôs discuss the <strong>phase variable</strong>: it is the <strong>first changing variable</strong> over time because it simulates the wave movement.</p>\n\n<p>What does it mean? It means that <strong>for each</strong> animation frame, our base controller should <strong>increment</strong> this value. But to avoid this value throwing a buffer overflow, let‚Äôs modulo it with 2œÄ (since <code>Math.sin</code> dominio is already modulo 2œÄ).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">phase</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">phase</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">speed</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We multiply <code>speed</code> and <code>Math.PI</code> so that with <code>speed = 1</code>  we have the maximum speed (why? because <code>sin(0) = 0, sin(œÄ/2) = 1, sin(œÄ) = 0, ...</code>.</p>\n\n<h3>\n  <a name=\"finalizing\" href=\"#finalizing\">\n  </a>\n  Finalizing\n</h3>\n\n<p>Now that we have all code to draw a single line, we define a configuration array to draw all sub-waves and then cycle over them.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">return</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"na\">attenuation</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">lineWidth</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"na\">opacity</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">attenuation</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"na\">lineWidth</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"na\">opacity</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">attenuation</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"na\">lineWidth</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"na\">opacity</span><span class=\"p\">:</span> <span class=\"mf\">0.4</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">attenuation</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">lineWidth</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"na\">opacity</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">},</span>\n\n    <span class=\"c1\">// basic line</span>\n    <span class=\"p\">{</span> <span class=\"na\">attenuation</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">lineWidth</span><span class=\"p\">:</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"na\">opacity</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n<span class=\"p\">];</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"the-ios-9-style\" href=\"#the-ios-9-style\">\n  </a>\n  The iOS 9+ style\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XUizMgdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2392/1%2AyXia5olaPzgiWmTLtK15dQ.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XUizMgdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2392/1%2AyXia5olaPzgiWmTLtK15dQ.gif\" alt=\"GIF of SiriwaveJS iOS9+\" loading=\"lazy\" width=\"800\" height=\"397\" data-animated=\"true\"></a></p>\n\n<p>Now things start to get complicated. The style introduced with iOS 9 is really complex and reverse engineering to simulate it‚Äôs not easy at all! I‚Äôm not fully satisfied with the final result, but I‚Äôll continue to improve it until I get the desired result.</p>\n\n<p>As previously done, let‚Äôs start to obtain the linear equations of the waves.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mTqxkzFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2ARxQeKt8kr44BGOiglmf6-A.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mTqxkzFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2ARxQeKt8kr44BGOiglmf6-A.png\" alt=\"Original Siri iOS 9+ wave-form\" loading=\"lazy\" width=\"745\" height=\"195\"></a></p>\n\n<p>As you can notice:</p>\n\n<ul>\n<li><p>We have three <strong>different specular equations</strong> with different colors (<strong>green, blue, red</strong>)</p></li>\n<li><p>A single wave seems to be a <strong>sum of sine equations</strong> with <strong>different parameters</strong></p></li>\n<li><p>All other colors are a <strong>composition</strong> of these three base colors</p></li>\n<li><p>There is a **straight line **at the plot boundaries</p></li>\n</ul>\n\n<p>By picking again our previous equations, let‚Äôs define a more complex equation that <strong>involves translation</strong>. We start by defining again our attenuation equation:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ea5U-4XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AIW7BD0ES7gB_i5_jXFK1yw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ea5U-4XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AIW7BD0ES7gB_i5_jXFK1yw.png\" alt=\"\" loading=\"lazy\" width=\"199\" height=\"44\"></a></p>\n\n<p>Now, define <code>h(x, A, k, t)</code> function, that is the sine function <strong>multiplied for **attenuation function</strong>, in its absolute value:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mROW9kw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AYJVEyZWAK5a0Wo-DEnX42Q.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mROW9kw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AYJVEyZWAK5a0Wo-DEnX42Q.png\" alt=\"\" loading=\"lazy\" width=\"295\" height=\"38\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OBISlc2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2A8-Q9mONQMLe8XY96Sh5gFg.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OBISlc2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2A8-Q9mONQMLe8XY96Sh5gFg.png\" alt=\"\" loading=\"lazy\" width=\"522\" height=\"225\"></a></p>\n\n<p>We now have a powerful tool.</p>\n\n<p>With <code>h(x)</code>, we can now create the final wave-form by summing different <strong>h(x)</strong> with different parameters involving different amplitudes, frequency, and translations. For example, let‚Äôs define the *<em>red curve *</em> by putting random values.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--esvgAmEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2A8H7pGIkpTN5MVv01AqHOnw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--esvgAmEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2A8H7pGIkpTN5MVv01AqHOnw.png\" alt=\"\" loading=\"lazy\" width=\"679\" height=\"18\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1wkvcLQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2590/1%2AQO-3MLlKAZDxX-yKWUp5QQ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1wkvcLQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2590/1%2AQO-3MLlKAZDxX-yKWUp5QQ.png\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"264\"></a></p>\n\n<p>If we do the same with a <strong>green</strong> and <strong>blue</strong> curve, this is the result:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YPaObL7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AN2tzkw5l3tGsXFFpVEBgBQ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YPaObL7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AN2tzkw5l3tGsXFFpVEBgBQ.png\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"269\"></a></p>\n\n<p>This is not quite perfect, but it could work.</p>\n\n<p>To obtain the specular version, just multiply everything by <code>-1</code>.</p>\n\n<p>In the coding side, the approach is the same, we have only a more complex equation for <code>_ypos</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">K</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">NO_OF_CURVES</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// This parameters should be generated randomly</span>\n<span class=\"kd\">const</span> <span class=\"nx\">widths</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span> <span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">offsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span> <span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">amplitudes</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span> <span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">phases</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">];</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">_globalAttFn</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"nx\">K</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nx\">K</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"nx\">K</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">_ypos</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">ci</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">ci</span> <span class=\"o\">&lt;</span> <span class=\"nx\">NO_OF_CURVES</span><span class=\"p\">;</span> <span class=\"nx\">ci</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"nx\">offsets</span><span class=\"p\">[</span><span class=\"nx\">ci</span><span class=\"p\">];</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"nx\">widths</span><span class=\"p\">[</span><span class=\"nx\">ci</span><span class=\"p\">];</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">*</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nx\">t</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">y</span> <span class=\"o\">+=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span>\n            <span class=\"nx\">amplitudes</span><span class=\"p\">[</span><span class=\"nx\">ci</span><span class=\"p\">]</span> <span class=\"o\">*</span> \n            <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">-</span> <span class=\"nx\">phases</span><span class=\"p\">[</span><span class=\"nx\">ci</span><span class=\"p\">])</span> <span class=\"o\">*</span> \n            <span class=\"nf\">_globalAttFn</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">y</span> <span class=\"o\">/</span> <span class=\"nx\">NO_OF_CURVES</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">canvasHeightMax</span> <span class=\"o\">*</span> <span class=\"nx\">globalAmplitude</span> <span class=\"o\">*</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>There‚Äôs nothing complex here. The only thing that changed is that we cycle <code>NO_OF_CURVES</code> times overall pseudo-random parameters and we <strong>sum</strong> all <strong>y values</strong>.</p>\n\n<p>Before multiplying it for <code>canvasHeightMax</code> and  <code>globalAmplitude</code> that give us the absolute PX coordinate of the canvas, we divide it for <code>NO_OF_CURVES</code> so that <strong>y is always ‚â§ 1</strong>.</p>\n\n<h3>\n  <a name=\"composite-operation\" href=\"#composite-operation\">\n  </a>\n  Composite operation\n</h3>\n\n<p>One thing that actually matters here is the <code>globalCompositeOperation</code> mode to set in the Canvas. If you notice, in the original controller, when there‚Äôs an overlap of 2+ colors, they‚Äôre actually mixed in a standard way.</p>\n\n<p>The default is set to <code>source-over</code>, but the result is poor, even with an opacity set.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wByi_x3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AwlFF6gwTfbz324uhSuYaOg.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wByi_x3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AwlFF6gwTfbz324uhSuYaOg.png\" alt=\"composite operation: source-over\" loading=\"lazy\" width=\"800\" height=\"388\"></a></p>\n\n<p>You can see all examples of vary **globalCompositeOperation **here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation</a></p>\n\n<p>By setting <code>globalCompositeOperation</code> to <code>ligther</code>, you notice that the intersection of the colors is nearest to the original.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aRUTu1Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2ADxOICjfEReAFqCeC5V0oNA.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aRUTu1Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2ADxOICjfEReAFqCeC5V0oNA.png\" alt=\"Composite operation: lighter\" loading=\"lazy\" width=\"800\" height=\"371\"></a></p>\n\n<h2>\n  <a name=\"build-with-rollupjs\" href=\"#build-with-rollupjs\">\n  </a>\n  Build with RollupJS\n</h2>\n\n<p>Before refactoring everything, I wasn‚Äôt satisfied at all with the codebase: old prototype-like classes, a single Javascript file for everything, no uglify/minify and <strong>no build at all</strong>.</p>\n\n<p>Using the new ES6 feature like <strong>native classes, spread operators</strong> and <strong>lambda functions</strong>, I was able to clean everything, split files, and decrease lines of unnecessary code.</p>\n\n<p>Furthermore, I used <a href=\"https://rollupjs.org/\">RollupJS</a> to create a transpiled and minified build in various formats.</p>\n\n<p>Since this is a browser-only library, I decided to create two builds: a <strong>UMD (Universal Module Definition)</strong> build that you can use directly by importing the script or by using CDN, and another one as an <strong>ESM module</strong>.</p>\n\n<p>The UMD module is built with this configuration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"p\">{</span>\n    <span class=\"nl\">input</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">src/siriwave.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nl\">file</span><span class=\"p\">:</span> <span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">unpkg</span><span class=\"p\">,</span>\n        <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">amdName</span><span class=\"p\">,</span>\n        <span class=\"nx\">format</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">umd</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nf\">resolve</span><span class=\"p\">(),</span>\n        <span class=\"nf\">commonjs</span><span class=\"p\">(),</span>\n        <span class=\"nf\">babel</span><span class=\"p\">({</span> <span class=\"na\">exclude</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">node_modules/**</span><span class=\"dl\">'</span> <span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>An additional **minified UMD module **is built with this configuration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"p\">{</span>\n    <span class=\"nl\">input</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">src/siriwave.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nl\">file</span><span class=\"p\">:</span> <span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">unpkg</span><span class=\"o\">**</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.js</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">.min.js</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"p\">,</span>\n        <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">amdName</span><span class=\"p\">,</span>\n        <span class=\"nx\">format</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">umd</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nf\">resolve</span><span class=\"p\">(),</span>\n        <span class=\"nf\">commonjs</span><span class=\"p\">(),</span>\n        <span class=\"nf\">babel</span><span class=\"p\">({</span> <span class=\"na\">exclude</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">node_modules/**</span><span class=\"dl\">'</span> <span class=\"p\">}),</span>\n        <span class=\"o\">**</span><span class=\"nf\">uglify</span><span class=\"p\">()</span><span class=\"o\">**</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Benefiting of UnPKG service, you can find the final build on this URL served by a CDN: <a href=\"https://unpkg.com/siriwave/dist/siriwave.min.js\">https://unpkg.com/siriwave/dist/siriwave.min.js</a></p>\n\n<p>This is the ‚Äúold style Javascript way‚Äù ‚Äî you can just import your script and then refer in your code by using <code>SiriWave</code> global object.</p>\n\n<p>To provide a more elegant and modern way, I also built an ESM module with this configuration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"p\">{</span> \n    <span class=\"nl\">input</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">src/siriwave.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n        <span class=\"nl\">file</span><span class=\"p\">:</span> <span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">,</span> \n        <span class=\"nx\">format</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">esm</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span> \n    <span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span> \n        <span class=\"nf\">babel</span><span class=\"p\">({</span> <span class=\"na\">exclude</span><span class=\"p\">:</span> <span class=\"err\">‚Äò</span><span class=\"nx\">node_modules</span><span class=\"cm\">/**‚Äô })\n    ]\n}\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We clearly don‚Äôt want the <strong>resolve **or **commonjs</strong> RollupJS plugins because the developer transplier will resolve dependencies for us.</p>\n\n<p>You can find the final RollupJS configuration here: <a href=\"https://github.com/kopiro/siriwave/blob/master/rollup.config.js\">https://github.com/kopiro/siriwave/blob/master/rollup.config.js</a></p>\n\n<h3>\n  <a name=\"watch-and-hot-code-reload\" href=\"#watch-and-hot-code-reload\">\n  </a>\n  Watch and Hot code reload\n</h3>\n\n<p>Using RollupJS, you can also take advantage of <code>rollup-plugin-livereload</code> and <code>rollup-plugin-serve</code> plugins to provide a better way to work on scripts.</p>\n\n<p>Basically, you just add these plugins when you‚Äôre in ‚Äúdeveloper‚Äù mode:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">livereload</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">rollup-plugin-livereload</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">serve</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">rollup-plugin-serve</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NODE_ENV</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">production</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">additional_plugins</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"nf\">serve</span><span class=\"p\">({</span> <span class=\"na\">open</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">contentBase</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">.</span><span class=\"dl\">'</span> <span class=\"p\">}));</span>\n    <span class=\"nx\">additional_plugins</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"nf\">livereload</span><span class=\"p\">({</span> <span class=\"na\">watch</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">dist</span><span class=\"dl\">'</span> <span class=\"p\">}));</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We finish by adding these lines into the <strong>package.json:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">module</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">dist/siriwave.m.js</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"dl\">\"</span><span class=\"s2\">jsnext:main</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">dist/siriwave.m.js</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"dl\">\"</span><span class=\"s2\">unpkg</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">dist/siriwave.js</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"dl\">\"</span><span class=\"s2\">amdName</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">SiriWave</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"dl\">\"</span><span class=\"s2\">scripts</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">build</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">NODE_ENV=production rollup -c</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">dev</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">rollup -c -w</span><span class=\"dl\">\"</span>\n<span class=\"p\">},</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Let‚Äôs clarify some parameters:</p>\n\n<ul>\n<li><p><code>module / jsnext:main</code> - path of dist ESM module</p></li>\n<li><p><code>unpkg</code> - path of dist UMD module</p></li>\n<li><p><code>amdName</code> name of the global object in UMD module</p></li>\n</ul>\n\n<p>Thanks a lot <strong>RollupJS!</strong></p>\n\n<p>Hope that you find this article interesting, see you soon! üòé</p>\n\n",
  "body_markdown": "It was 4 years ago when I had the idea to replicate the Apple¬Æ Siri wave-form (introduced with the iPhone 4S) in the browser using pure Javascript.\n\nDuring the last month, I updated this library by doing a lot of refactoring using ES6 features and reviewed the build process using **RollupJS**. Now I‚Äôve decided to share what I've learned during this process and the math behind this library.\n\nTo get an idea of what the output will be, visit the [live example](http://kopiro.github.io/siriwave/); the whole codebase is [here](https://github.com/kopiro/siriwave).\n\nAdditionally, you can download all plots drawn in this article in GCX (OSX Grapher format): [default.gcx](https://github.com/kopiro/siriwave/raw/master/etc/gcx/default.gcx) and [ios9.gcx](https://github.com/kopiro/siriwave/raw/master/etc/gcx/ios9.gcx)\n\n## The classic wave style\n\n![Classic style](https://cdn-images-1.medium.com/max/2380/1*60NI4dQ3KgGxAm7SJSUQww.gif)\n\nInitially, this library only had the classic wave-form style that all of you remember using in iOS 7 and iOS 8.\n\nIt‚Äôs no hard task to replicate this simple wave-form, only a bit of math and basic concepts of the Canvas API.\n\n![Siri wave-form in iOS 7/8](https://cdn-images-1.medium.com/max/2000/0*1FuKVf3OEMhJq8zq.jpg)\n\nYou‚Äôre probably thinking that the wave-form is a modification of the **Sine** math equation, and you're right... well, almost right.\n\nBefore starting to code, we‚Äôve got to find our linear equation that will be simply applied afterward. My favorite plot editor is **Grapher;** you can find it in any OSX installation under *Applications > Utilities > Grapher.app*\n\nWe start by drawing the well known `sin(x)`:\n\n![Plot for y = sin(x)](https://cdn-images-1.medium.com/max/2000/1*P_POqjjTsJSRbd1yXhU4OQ.png)\n\nPerfecto! Now, let‚Äôs add some parameters (Amplitude `[A]`, Time coordinate `[t]` and Spatial frequency `[k]`) that will be useful later (Read more at: [https://en.wikipedia.org/wiki/Wave](https://en.wikipedia.org/wiki/Wave)).\n\n![](https://miro.medium.com/max/346/1*bub3URu32khRadkhU-WvOw.png)\n\nNow we have to ‚Äúattenuate‚Äù this function on plot boundaries, so that for `|x| > 2`, the `y` values tends to 0. Let‚Äôs draw separately an equation `g(x)` that has these characteristics.\n\n![](https://cdn-images-1.medium.com/max/2000/1*ODjpbIr835U5NvW3MpetTw.png)\n\n![](https://cdn-images-1.medium.com/max/2000/1*Zsl7m01QLtcwwrj8icJ2dw.png)\n\nThis seems to be a good equation to start with. Let‚Äôs add some parameters here too to smooth the curve for our purposes:\n\n![](https://cdn-images-1.medium.com/max/2000/1*nQ0Eu0V9YxnXNWeT7B66-g.png)\n\nNow, by multiplying our `f(x, ‚Ä¶)` and `g(x, ‚Ä¶)`, and by setting precise parameters to the other static values, we obtain something like this.\n\n* `A = 0.9` set the amplitude of the wave to max Y = A\n\n* `k = 8` set the spatial frequency and we obtain ‚Äúmore peaks‚Äù in the range [-2, 2]\n\n* `t = -œÄ/2` set the phase translation so that `f(0, ‚Ä¶) = 1`\n\n* `K = 4` set the factor for the ‚Äúattenuation equation‚Äù so that the final equation is y = 0 when `|x| ‚â• 2`\n\n![](https://cdn-images-1.medium.com/max/2000/1*PpPTyzlE1R1WBHRorp9wNA.png)\n\nIt looks good! üòç\n\nNow, if you notice on the original wave we have other sub-waves that will give a lower value for the amplitude. Let‚Äôs draw them for `A = {0.8, 0.6, 0.4, 0.2, -0.2, -0.4, -0.6, -0.8}`\n\n![](https://cdn-images-1.medium.com/max/2000/1*Vf8LFJTkLtk5NWifl4D_8w.png)\n\nIn the final canvas composition, the sub-waves will be drawn with a decreasing opacity tending to `0`.\n\n### Basic code concepts\n\nWhat do we do now with this equation?\n\nWe use the equation to obtain the **Y value** for an **input X**.\n\nBasically, by using a simple **for loop** from `-2 to 2` (the *plot boundaries in this case*), we have to draw **point by point** the equation on the canvas using the [beginPath](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath) and [lineTo](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo) API.\n\n```js\nconst ctx = canvas.getContext('2d');\n    \nctx.beginPath();\nctx.strokeStyle = 'white';\n    \nfor (let i = -2; i <= 2; i += 0.01) {\n   const x = _xpos(i);\n   const y = _ypos(i);\n   ctx.lineTo(x, y);\n}\n    \nctx.stroke();\n```\n\nProbably this pseudo-code will clear up these ideas. We still have to implement our `_xpos` and `_ypos` functions.\n\nBut‚Ä¶ hey, what is `0.01`???\n\nThat value represents **how many pixels** you move forward in each iteration before reaching the right plot boundary... but why 0.0.1, and what is the correct value?\n\nIf you use a really small value (`< 0.01`), you‚Äôll get an insanely precise rendering of the graph but your performance will decrease because you‚Äôll get too many iterations.\n\nInstead, if you use a really big value (`> 0.1`) your graph will lose precision and you‚Äôll notice this instantly.\n\n![Plot drawn with precision = 0.2](https://cdn-images-1.medium.com/max/2000/1*F9vtajOYHMBnd47FtuCcBQ.png)\n\nYou can see that the final code is actually similar to the pseudo-code: [https://github.com/kopiro/siriwave/blob/master/src/curve.ts](https://github.com/kopiro/siriwave/blob/master/src/curve.ts)\n\n### Implement `_xpos(i)`\n\nYou may argue that if we‚Äôre drawing the plot by incrementing the `x`, then `_xpos` may simply return the input argument.\n\nThis is almost correct, but our plot is always drawn from `-B` to `B` (`B = Boundary = 2`).\n\nSo, to draw on the canvas via **pixel coordinates**, we must translate `-B to 0` and `B to 1` (simple transposition of [-B, B] to [0,1]); then multiply [0,1] and the **canvas width (w)**.\n\n```\n_xpos(i) = w * [ (i + B) / 2B ]\n```\n\n### Implement `_ypos`\n\nTo implement `_ypos`, we should simply write our equation obtained before (closely).\n\n```js\nconst K = 4;\nconst FREQ = 6;\n\nfunction _attFn(x) {\n    return Math.pow(K / (K + Math.pow(x, K)), K);\n}\n\nfunction _ypos(i) {\n    return Math.sin(FREQ * i - phase) * \n        _attFn(i) * \n        canvasHeight *\n        globalAmplitude * \n        (1 / attenuation);\n}\n```\n\nLet‚Äôs clarify some parameters.\n\n* `canvasHeight` is Canvas height expressed in PX\n\n* `i` is our input value (the X)\n\n* `phase` is the most important parameter, let‚Äôs discuss it later\n\n* `globalAmplitude` is a static parameter that represents the amplitude of the total wave (composed by sub-waves)\n\n* `attenuation` is a static parameter that changes for each line and represents the amplitude of a wave\n\n### Phase\n\nNow let‚Äôs discuss the **phase variable**: it is the **first changing variable** over time because it simulates the wave movement.\n\nWhat does it mean? It means that **for each** animation frame, our base controller should **increment** this value. But to avoid this value throwing a buffer overflow, let‚Äôs modulo it with 2œÄ (since `Math.sin` dominio is already modulo 2œÄ).\n\n```js\nphase = (phase + (Math.PI / 2) * speed) % (2 * Math.PI);\n```\n\nWe multiply `speed` and `Math.PI` so that with `speed = 1`  we have the maximum speed (why? because `sin(0) = 0, sin(œÄ/2) = 1, sin(œÄ) = 0, ...`.\n\n### Finalizing\n\nNow that we have all code to draw a single line, we define a configuration array to draw all sub-waves and then cycle over them.\n\n```js\nreturn [\n    { attenuation: -2, lineWidth: 1.0, opacity: 0.1 },\n    { attenuation: -6, lineWidth: 1.0, opacity: 0.2 },\n    { attenuation: 4, lineWidth: 1.0, opacity: 0.4 },\n    { attenuation: 2, lineWidth: 1.0, opacity: 0.6},\n\n    // basic line\n    { attenuation: 1, lineWidth: 1.5, opacity: 1.0},\n];\n```\n\n## The iOS 9+ style\n\n![GIF of SiriwaveJS iOS9+](https://cdn-images-1.medium.com/max/2392/1*yXia5olaPzgiWmTLtK15dQ.gif)\n\nNow things start to get complicated. The style introduced with iOS 9 is really complex and reverse engineering to simulate it‚Äôs not easy at all! I‚Äôm not fully satisfied with the final result, but I‚Äôll continue to improve it until I get the desired result.\n\nAs previously done, let‚Äôs start to obtain the linear equations of the waves.\n\n![Original Siri iOS 9+ wave-form](https://cdn-images-1.medium.com/max/2000/1*RxQeKt8kr44BGOiglmf6-A.png)\n\nAs you can notice:\n\n* We have three **different specular equations** with different colors (**green, blue, red**)\n\n* A single wave seems to be a **sum of sine equations** with **different parameters**\n\n* All other colors are a **composition** of these three base colors\n\n* There is a **straight line **at the plot boundaries\n\nBy picking again our previous equations, let‚Äôs define a more complex equation that **involves translation**. We start by defining again our attenuation equation:\n\n![](https://cdn-images-1.medium.com/max/2000/1*IW7BD0ES7gB_i5_jXFK1yw.png)\n\nNow, define `h(x, A, k, t)` function, that is the sine function **multiplied for **attenuation function**, in its absolute value:\n\n![](https://cdn-images-1.medium.com/max/2000/1*YJVEyZWAK5a0Wo-DEnX42Q.png)\n\n![](https://cdn-images-1.medium.com/max/2000/1*8-Q9mONQMLe8XY96Sh5gFg.png)\n\nWe now have a powerful tool.\n\nWith `h(x)`, we can now create the final wave-form by summing different **h(x)** with different parameters involving different amplitudes, frequency, and translations. For example, let‚Äôs define the **red curve ** by putting random values.\n\n![](https://cdn-images-1.medium.com/max/2000/1*8H7pGIkpTN5MVv01AqHOnw.png)\n\n![](https://cdn-images-1.medium.com/max/2590/1*QO-3MLlKAZDxX-yKWUp5QQ.png)\n\nIf we do the same with a **green** and **blue** curve, this is the result:\n\n![](https://cdn-images-1.medium.com/max/2000/1*N2tzkw5l3tGsXFFpVEBgBQ.png)\n\nThis is not quite perfect, but it could work.\n\nTo obtain the specular version, just multiply everything by `-1`.\n\nIn the coding side, the approach is the same, we have only a more complex equation for `_ypos`.\n\n```js\nconst K = 4;\nconst NO_OF_CURVES = 3;\n\n// This parameters should be generated randomly\nconst widths = [ 0.4, 0.6, 0.3 ];\nconst offsets = [ 1, 4, -3 ];\nconst amplitudes = [ 0.5, 0.7, 0.2 ];\nconst phases = [ 0, 0, 0 ];\n\nfunction _globalAttFn(x) {\n    return Math.pow(K / (K + Math.pow(x, 2)), K);\n}\n\nfunction _ypos(i) {\n    let y = 0;\n    for (let ci = 0; ci < NO_OF_CURVES; ci++) {\n        const t = offsets[ci];\n        const k = 1 / widths[ci];\n        const x = (i * k) - t;\n        \n        y += Math.abs(\n            amplitudes[ci] * \n            Math.sin(x - phases[ci]) * \n            _globalAttFn(x)\n        );\n    }\n\n    y = y / NO_OF_CURVES;\n    return canvasHeightMax * globalAmplitude * y;\n}\n```\n\nThere‚Äôs nothing complex here. The only thing that changed is that we cycle `NO_OF_CURVES` times overall pseudo-random parameters and we **sum** all **y values**.\n\nBefore multiplying it for `canvasHeightMax` and  `globalAmplitude` that give us the absolute PX coordinate of the canvas, we divide it for `NO_OF_CURVES` so that **y is always ‚â§ 1**.\n\n### Composite operation\n\nOne thing that actually matters here is the `globalCompositeOperation` mode to set in the Canvas. If you notice, in the original controller, when there‚Äôs an overlap of 2+ colors, they‚Äôre actually mixed in a standard way.\n\nThe default is set to `source-over`, but the result is poor, even with an opacity set.\n\n![composite operation: source-over](https://cdn-images-1.medium.com/max/2000/1*wlFF6gwTfbz324uhSuYaOg.png)\n\nYou can see all examples of vary **globalCompositeOperation **here: [https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\nBy setting `globalCompositeOperation` to `ligther`, you notice that the intersection of the colors is nearest to the original.\n\n![Composite operation: lighter](https://cdn-images-1.medium.com/max/2000/1*DxOICjfEReAFqCeC5V0oNA.png)\n\n## Build with RollupJS\n\nBefore refactoring everything, I wasn‚Äôt satisfied at all with the codebase: old prototype-like classes, a single Javascript file for everything, no uglify/minify and **no build at all**.\n\nUsing the new ES6 feature like **native classes, spread operators** and **lambda functions**, I was able to clean everything, split files, and decrease lines of unnecessary code.\n\nFurthermore, I used [RollupJS](https://rollupjs.org/) to create a transpiled and minified build in various formats.\n\nSince this is a browser-only library, I decided to create two builds: a **UMD (Universal Module Definition)** build that you can use directly by importing the script or by using CDN, and another one as an **ESM module**.\n\nThe UMD module is built with this configuration:\n\n```js\n{\n    input: 'src/siriwave.js',\n    output: {\n        file: pkg.unpkg,\n        name: pkg.amdName,\n        format: 'umd'\n    },\n    plugins: [\n        resolve(),\n        commonjs(),\n        babel({ exclude: 'node_modules/**' }),\n    ]\n}\n```\n\nAn additional **minified UMD module **is built with this configuration:\n\n```js\n{\n    input: 'src/siriwave.js',\n    output: {\n        file: pkg.unpkg**.replace('.js', '.min.js')**,\n        name: pkg.amdName,\n        format: 'umd'\n    },\n    plugins: [\n        resolve(),\n        commonjs(),\n        babel({ exclude: 'node_modules/**' }),\n        **uglify()**\n    ]\n}\n```\n\nBenefiting of UnPKG service, you can find the final build on this URL served by a CDN: [https://unpkg.com/siriwave/dist/siriwave.min.js](https://unpkg.com/siriwave/dist/siriwave.min.js)\n\nThis is the ‚Äúold style Javascript way‚Äù ‚Äî you can just import your script and then refer in your code by using `SiriWave` global object.\n\nTo provide a more elegant and modern way, I also built an ESM module with this configuration:\n\n```js\n{ \n    input: 'src/siriwave.js',\n    output: { \n        file: pkg.module, \n        format: 'esm'\n    }, \n    plugins: [ \n        babel({ exclude: ‚Äònode_modules/**‚Äô })\n    ]\n}\n```\n\nWe clearly don‚Äôt want the **resolve **or **commonjs** RollupJS plugins because the developer transplier will resolve dependencies for us.\n\nYou can find the final RollupJS configuration here: [https://github.com/kopiro/siriwave/blob/master/rollup.config.js](https://github.com/kopiro/siriwave/blob/master/rollup.config.js)\n\n### Watch and Hot code reload\n\nUsing RollupJS, you can also take advantage of `rollup-plugin-livereload` and `rollup-plugin-serve` plugins to provide a better way to work on scripts.\n\nBasically, you just add these plugins when you‚Äôre in ‚Äúdeveloper‚Äù mode:\n\n```js\nimport livereload from 'rollup-plugin-livereload';\nimport serve from 'rollup-plugin-serve';\n\nif (process.env.NODE_ENV !== 'production') {\n    additional_plugins.push(serve({ open: true, contentBase: '.' }));\n    additional_plugins.push(livereload({ watch: 'dist' }));\n}\n```\n\nWe finish by adding these lines into the **package.json:**\n\n```js\n\"module\": \"dist/siriwave.m.js\",\n\"jsnext:main\": \"dist/siriwave.m.js\",\n\"unpkg\": \"dist/siriwave.js\",\n\"amdName\": \"SiriWave\",\n\"scripts\": {\n    \"build\": \"NODE_ENV=production rollup -c\",\n    \"dev\": \"rollup -c -w\"\n},\n```\n\nLet‚Äôs clarify some parameters:\n\n* `module / jsnext:main` - path of dist ESM module\n\n* `unpkg` - path of dist UMD module\n\n* `amdName` name of the global object in UMD module\n\nThanks a lot **RollupJS!**\n\nHope that you find this article interesting, see you soon! üòé",
  "user": {
    "name": "Flavio Maria De Stefano",
    "username": "kopiro",
    "twitter_username": "destefanoflavio",
    "github_username": "kopiro",
    "user_id": 386888,
    "website_url": "https://www.kopiro.me",
    "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F386888%2Ff683c0ad-bdf7-4401-9141-46416239d66d.jpg",
    "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F386888%2Ff683c0ad-bdf7-4401-9141-46416239d66d.jpg"
  }
}